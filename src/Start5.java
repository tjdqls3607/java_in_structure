public class Start5 {
    static int share;

    public static void main(String[] args) {
        share = 55;

        int k = fun(5, 7);

        System.out.println(share);
    }

    private static int fun(int m, int p) {
        share = m +p;

        return m - p;
    }
}
/*
2번줄의 코드를 보면 share 변수에 static 키워드가 붙어있다. share 변수는 T메모리의 스태틱 영역에 변수 공간이 할당 된다.
그것도  Start5 클래스 안에 정의 됐으니 해당 클래스가 T메모리 스태틱 영역에 배치될 때 그 안에 share 변수가 클래스의 멤버로 공간을 만들어 저장된다.
4번줄을 실행하고 나면 T메모리에 main()메서드 스택 프레임이 만들어진다. 그리고 5번줄을 실행하고 나면
static 영역 내의 share 변수 공간에 55 라는 수가 할당될 것이다.
7번줄을 싷행하기위해 main()메서드 스택 프레임에 k변수 공간이 만들어진다.
이어서 fun()메서드가 있는 12번줄로 이동하고 스택프레임에 fun()메서드 스택프레임이 생성되고 인자값들과 return값을
저장할 변수 공간도 생긴다.
13번줄이 실행되고 나면 static영역내의 share변수 공간의 55대신 m+p값의 결과인 12가 할당된다
이후 16번줄의 닫는 중괄호를 만나면 fun()메서드 스택프레임이 사라지면서 호출된 곳으로 return값을 돌려준다.
여기서 return 값이 m-p이기 떄문에 자동적으로 k값은 -2가 된다.

여기서 share는 main(), fun() 메서드 사이에서 공유하여 사용할수 있는 전역변수가 된다
지역 변수 = 스택 프레임에 종속적인 변수
전역 변수 = 스택 프레임에 독립적인 변수

전역 변수는 공유변수 라고도 불린다. 여러 메서드 들에서 접근하여 사용 할 수 있기 떄문인데, 이렇게 된다면
여러 메서드들이 참조하게된다. 여러 메서드들이 전역변수에 가른값을 저장한다면 코드가 스파게티 코드가 되기때문에
실무에서는 전역변수를 피하는 편이다.

다만 읽기 전용으로 값을 공유해서 전역상수로 쓰는것은 좋다.
 */